package org.wso2.carbon.um.ws.service;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.3.8
 * 2020-12-31T20:26:42.638+05:30
 * Generated source version: 3.3.8
 *
 */
@WebServiceClient(name = "RemoteUserStoreManagerService",
                  wsdlLocation = "file:/C:/Users/SAURABH/AppData/Local/Temp/tempdir14407942385562470121.tmp/RemoteUserStoreManagerService_1.wsdl",
                  targetNamespace = "http://service.ws.um.carbon.wso2.org")
public class RemoteUserStoreManagerService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://service.ws.um.carbon.wso2.org", "RemoteUserStoreManagerService");
    public final static QName RemoteUserStoreManagerServiceHttpsSoap12Endpoint = new QName("http://service.ws.um.carbon.wso2.org", "RemoteUserStoreManagerServiceHttpsSoap12Endpoint");
    public final static QName RemoteUserStoreManagerServiceHttpsEndpoint = new QName("http://service.ws.um.carbon.wso2.org", "RemoteUserStoreManagerServiceHttpsEndpoint");
    public final static QName RemoteUserStoreManagerServiceHttpsSoap11Endpoint = new QName("http://service.ws.um.carbon.wso2.org", "RemoteUserStoreManagerServiceHttpsSoap11Endpoint");
    static {
        URL url = null;
        try {
            url = new URL("file:/C:/Users/SAURABH/AppData/Local/Temp/tempdir14407942385562470121.tmp/RemoteUserStoreManagerService_1.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(RemoteUserStoreManagerService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/C:/Users/SAURABH/AppData/Local/Temp/tempdir14407942385562470121.tmp/RemoteUserStoreManagerService_1.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public RemoteUserStoreManagerService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public RemoteUserStoreManagerService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public RemoteUserStoreManagerService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public RemoteUserStoreManagerService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public RemoteUserStoreManagerService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public RemoteUserStoreManagerService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns RemoteUserStoreManagerServicePortType
     */
    @WebEndpoint(name = "RemoteUserStoreManagerServiceHttpsSoap12Endpoint")
    public RemoteUserStoreManagerServicePortType getRemoteUserStoreManagerServiceHttpsSoap12Endpoint() {
        return super.getPort(RemoteUserStoreManagerServiceHttpsSoap12Endpoint, RemoteUserStoreManagerServicePortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns RemoteUserStoreManagerServicePortType
     */
    @WebEndpoint(name = "RemoteUserStoreManagerServiceHttpsSoap12Endpoint")
    public RemoteUserStoreManagerServicePortType getRemoteUserStoreManagerServiceHttpsSoap12Endpoint(WebServiceFeature... features) {
        return super.getPort(RemoteUserStoreManagerServiceHttpsSoap12Endpoint, RemoteUserStoreManagerServicePortType.class, features);
    }


    /**
     *
     * @return
     *     returns RemoteUserStoreManagerServicePortType
     */
    @WebEndpoint(name = "RemoteUserStoreManagerServiceHttpsEndpoint")
    public RemoteUserStoreManagerServicePortType getRemoteUserStoreManagerServiceHttpsEndpoint() {
        return super.getPort(RemoteUserStoreManagerServiceHttpsEndpoint, RemoteUserStoreManagerServicePortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns RemoteUserStoreManagerServicePortType
     */
    @WebEndpoint(name = "RemoteUserStoreManagerServiceHttpsEndpoint")
    public RemoteUserStoreManagerServicePortType getRemoteUserStoreManagerServiceHttpsEndpoint(WebServiceFeature... features) {
        return super.getPort(RemoteUserStoreManagerServiceHttpsEndpoint, RemoteUserStoreManagerServicePortType.class, features);
    }


    /**
     *
     * @return
     *     returns RemoteUserStoreManagerServicePortType
     */
    @WebEndpoint(name = "RemoteUserStoreManagerServiceHttpsSoap11Endpoint")
    public RemoteUserStoreManagerServicePortType getRemoteUserStoreManagerServiceHttpsSoap11Endpoint() {
        return super.getPort(RemoteUserStoreManagerServiceHttpsSoap11Endpoint, RemoteUserStoreManagerServicePortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns RemoteUserStoreManagerServicePortType
     */
    @WebEndpoint(name = "RemoteUserStoreManagerServiceHttpsSoap11Endpoint")
    public RemoteUserStoreManagerServicePortType getRemoteUserStoreManagerServiceHttpsSoap11Endpoint(WebServiceFeature... features) {
        return super.getPort(RemoteUserStoreManagerServiceHttpsSoap11Endpoint, RemoteUserStoreManagerServicePortType.class, features);
    }

}
